# Compiler and flags
CC = gcc
CFLAGS = -Wall -Wextra -I./src/wing -I./include

# Paths
LIB_SRC = src/wing
CLIENT_SRC = src/partypigeon/client
SERVER_SRC = src/partypigeon/server
BUILD_DIR = build

# Output files
LIB_OBJS = $(BUILD_DIR)/wing_protocol.o
CLIENT_OBJS = $(BUILD_DIR)/client_main.o
SERVER_OBJS = $(BUILD_DIR)/server_main.o

# Build targets
all: client server

# Build the library
$(BUILD_DIR)/wing_protocol.o: $(LIB_SRC)/wing_protocol.c include/wing_protocol.h | $(BUILD_DIR)
	$(CC) $(CFLAGS) -c $< -o $@

# Build the client app
client: $(LIB_OBJS) $(CLIENT_OBJS) | $(BUILD_DIR)
	$(CC) $^ -o $(BUILD_DIR)/client

$(BUILD_DIR)/client_main.o: $(CLIENT_SRC)/main.c | $(BUILD_DIR)
	$(CC) $(CFLAGS) -c $< -o $@

# Build the server app
server: $(LIB_OBJS) $(SERVER_OBJS) | $(BUILD_DIR)
	$(CC) $^ -o $(BUILD_DIR)/server

$(BUILD_DIR)/server_main.o: $(SERVER_SRC)/main.c | $(BUILD_DIR)
	$(CC) $(CFLAGS) -c $< -o $@

# Ensure build directory exists
$(BUILD_DIR):
	mkdir -p $(BUILD_DIR)

# Clean up
.PHONY: clean
clean:
	rm -rf $(BUILD_DIR)

